# Complete GitLab CI/CD Configuration for Claude Code
# This file includes all necessary steps to run Claude Code on GitLab

claude_webhook_handler:
  image: oven/bun:slim
  stage: build
  tags:
    - docker
  environment:
    name: claude-code
  before_script:
    # Install git for repository operations
    - apt-get update && apt-get install -y git openssh-client

    # Clone Claude Code for GitLab
    - git clone https://github.com/RealMikeChong/claude-code-for-gitlab.git /tmp/claude-code
    - cd /tmp/claude-code
    - bun install

    # Configure git
    - git config --global user.name "Claude Bot"
    - git config --global user.email "claude-bot@example.com"

    # Configure git credentials to use CLAUDE_CODE_GL_ACCESS_TOKEN as password
    - git config --global credential.helper store
    - |
      if [ -n "$CLAUDE_CODE_GL_ACCESS_TOKEN" ]; then
        echo "Configuring git credentials with CLAUDE_CODE_GL_ACCESS_TOKEN..."
        # Create credentials file for GitLab
        echo "https://gitlab-ci-token:${CLAUDE_CODE_GL_ACCESS_TOKEN}@${CI_SERVER_HOST}" >> ~/.git-credentials
        chmod 600 ~/.git-credentials
        # Set git to use the token for this project's remote URL
        git remote set-url origin "https://gitlab-ci-token:${CLAUDE_CODE_GL_ACCESS_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
      else
        echo "Warning: CLAUDE_CODE_GL_ACCESS_TOKEN not set!"
      fi

    # Return to project directory
    - cd $CI_PROJECT_DIR
  script: |
    # Parse webhook payload from environment
    echo "Processing GitLab webhook event..."
    echo "Event type: ${GITLAB_EVENT_TYPE}"
    echo "Processing Claude webhook trigger..."
    echo "Project: ${CLAUDE_PROJECT_PATH}"
    echo "Resource Type: ${CLAUDE_RESOURCE_TYPE}"
    echo "Resource ID: ${CLAUDE_RESOURCE_ID}"
    echo "Branch: ${CLAUDE_BRANCH}"
    echo "Author: ${CLAUDE_AUTHOR}"
    echo "Note: ${CLAUDE_NOTE}"
    echo "Payload: ${GITLAB_WEBHOOK_PAYLOAD}"

    # Run Claude Code action from cloned repository
    cd /tmp/claude-code

    # Step 1: Run prepare script
    echo "========================================="
    echo "Step 1: Preparing Claude Code action..."
    echo "========================================="
    bun run src/entrypoints/prepare.ts

    # Check if prepare was successful and trigger was found
    if [ $? -ne 0 ]; then
      echo "Prepare step failed, exiting..."
      exit 1
    fi

    # Step 2: Install Claude Code globally
    echo "========================================="
    echo "Step 2: Installing Claude Code..."
    echo "========================================="
    bun install -g @anthropic-ai/claude-code@1.0.60

    # Step 3: Install base-action dependencies
    echo "========================================="
    echo "Step 3: Installing base-action dependencies..."
    echo "========================================="
    cd base-action && bun install && cd ..

    # Step 4: Run Claude Code via base-action
    echo "========================================="
    echo "Step 4: Running Claude Code..."
    echo "========================================="

    # Set up environment for base-action
    export CLAUDE_CODE_ACTION="1"
    export INPUT_PROMPT_FILE="/tmp/claude-prompts/claude-prompt.txt"
    export INPUT_TIMEOUT_MINUTES="30"
    export INPUT_MCP_CONFIG=""
    export INPUT_SETTINGS=""
    export INPUT_SYSTEM_PROMPT=""
    export INPUT_APPEND_SYSTEM_PROMPT=""
    export INPUT_ALLOWED_TOOLS="${ALLOWED_TOOLS:-}"
    export INPUT_DISALLOWED_TOOLS="${DISALLOWED_TOOLS:-}"
    export INPUT_MAX_TURNS="${MAX_TURNS:-}"
    export INPUT_CLAUDE_ENV="${CLAUDE_ENV:-}"
    export INPUT_FALLBACK_MODEL="${FALLBACK_MODEL:-}"
    export ANTHROPIC_MODEL="${CLAUDE_MODEL:-sonnet}"
    export DETAILED_PERMISSION_MESSAGES="1"

    # Run the base-action
    bun run base-action/src/index.ts

    # Capture the exit code
    CLAUDE_EXIT_CODE=$?

    # Step 5: Update comment with results (if applicable)
    if [ -n "$CLAUDE_COMMENT_ID" ]; then
      echo "========================================="
      echo "Step 5: Updating comment with results..."
      echo "========================================="
      export CLAUDE_SUCCESS=$( [ $CLAUDE_EXIT_CODE -eq 0 ] && echo "true" || echo "false" )
      export PREPARE_SUCCESS="true"
      export OUTPUT_FILE="/tmp/claude-output.json"  # This will be created by base-action
      
      # Pass issue IID if we're in issue context
      if [ "$CLAUDE_RESOURCE_TYPE" = "issue" ]; then
        export CI_ISSUE_IID="$CLAUDE_RESOURCE_ID"
      fi
      
      bun run src/entrypoints/update-comment-gitlab.ts || echo "Failed to update comment"
    fi

    # Exit with Claude's exit code
    exit $CLAUDE_EXIT_CODE

  rules:
    # Only run when triggered by webhook with CLAUDE_TRIGGER variable
    - if: '$CLAUDE_TRIGGER == "true"'
  variables:
    # Authentication - Claude Code OAuth Token (recommended)
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN

    # GitLab Personal Access Token (required for API operations)
    CLAUDE_CODE_GL_ACCESS_TOKEN: $CLAUDE_CODE_GL_ACCESS_TOKEN

    # Or use traditional tokens:
    # GITLAB_TOKEN: $CLAUDE_GITLAB_TOKEN
    # ANTHROPIC_API_KEY: $CLAUDE_API_KEY

    # Claude configuration
    CLAUDE_TRIGGER_PHRASE: "@claude"
    CLAUDE_MODEL: "sonnet"

    # Optional: Allowed tools (comma-separated)
    # ALLOWED_TOOLS: "Edit,Read,Write"

    # Optional: Max conversation turns
    # MAX_TURNS: "5"

    # The webhook payload is passed as GITLAB_WEBHOOK_PAYLOAD
    # This is automatically set when using GitLab webhooks
    GIT_CLEAN_FLAGS: -fdx
    GIT_STRATEGY: clone
    DOCKER_DRIVER: overlay2
