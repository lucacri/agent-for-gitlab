name: Build and Push Webhook Service Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - "webhook-service/**"
      - ".github/workflows/docker-webhook-service.yml"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: "Push to Docker registries"
        required: false
        default: "false"

env:
  # Docker Hub
  DOCKER_HUB_REPOSITORY: realmikechong/claude-code-gitlab-webhook
  # GitHub Container Registry
  GHCR_REPOSITORY: ghcr.io/realmikechong/claude-code-gitlab-webhook
  # GitLab Container Registry (optional)
  GITLAB_REGISTRY: registry.gitlab.com/realmikechong/claude-code-gitlab-webhook

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to GitLab Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        continue-on-error: true
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_REGISTRY_USERNAME }}
          password: ${{ secrets.GITLAB_REGISTRY_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./webhook-service
          file: ./webhook-service/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' || github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GHCR_REPOSITORY }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  deploy-to-gitlab:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Deploy to GitLab App Runner
        continue-on-error: true
        env:
          GITLAB_API_TOKEN: ${{ secrets.GITLAB_API_TOKEN }}
          GITLAB_PROJECT_ID: ${{ secrets.GITLAB_PROJECT_ID }}
          GITLAB_TRIGGER_TOKEN: ${{ secrets.GITLAB_TRIGGER_TOKEN }}
        run: |
          # Trigger GitLab pipeline to deploy to App Runner
          curl -X POST \
            -H "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
            -F "token=${GITLAB_TRIGGER_TOKEN}" \
            -F "ref=main" \
            -F "variables[DOCKER_IMAGE]=${{ env.GHCR_REPOSITORY }}:${{ github.sha }}" \
            "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/trigger/pipeline"
