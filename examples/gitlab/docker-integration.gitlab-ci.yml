# GitLab CI/CD Configuration using Docker Image (Recommended)
# This is the easiest way to integrate Claude Code without cloning repositories

variables:
  # Claude configuration
  CLAUDE_TRIGGER_PHRASE: "@claude"
  CLAUDE_MODEL: "claude-3-5-sonnet-latest"

  # Branch configuration
  CLAUDE_BRANCH_PREFIX: "claude/"
  BASE_BRANCH: "main"

# Simple integration using pre-built Docker image
claude_assistant:
  # Use a pre-built Docker image that includes Claude Code for GitLab
  # You can build this image from https://github.com/RealMikeChong/claude-code-for-gitlab
  image: realmikechong/claude-code-gitlab:latest # Replace with your Docker registry

  script:
    # The Docker image already contains Claude Code installed
    # Just run the action directly
    - claude-code-action

  rules:
    # Trigger on merge request comments
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_request_note"'
      when: always
    # Trigger on issue comments (via webhook)
    - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGER_TYPE == "issue_comment"'
      when: always

  variables:
    # Authentication (choose one method)
    # Option 1: Claude Code OAuth Token (recommended)
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN

    # Option 2: Traditional tokens
    # GITLAB_TOKEN: $GITLAB_TOKEN
    # ANTHROPIC_API_KEY: $ANTHROPIC_API_KEY

# Alternative: Build your own Docker image
.build_claude_image:
  stage: .pre
  image: docker:latest
  services:
    - docker:dind
  script:
    # Build Docker image from the Claude Code repository
    - git clone https://github.com/RealMikeChong/claude-code-for-gitlab.git
    - cd claude-code-for-gitlab
    - |
      cat > Dockerfile << 'EOF'
      FROM oven/bun:1.1.29-alpine

      # Install system dependencies
      RUN apk add --no-cache git openssh-client

      # Copy application code
      WORKDIR /app
      COPY . .

      # Install dependencies
      RUN bun install --frozen-lockfile

      # Create entrypoint script
      RUN echo '#!/bin/sh' > /usr/local/bin/claude-code-action && \
          echo 'cd /app && bun run src/entrypoints/prepare.ts' >> /usr/local/bin/claude-code-action && \
          chmod +x /usr/local/bin/claude-code-action

      # Set working directory to where GitLab CI will mount the project
      WORKDIR /builds

      CMD ["claude-code-action"]
      EOF

    # Build and push to your registry
    - docker build -t $CI_REGISTRY_IMAGE/claude-code:latest .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/claude-code:latest

  only:
    # Only build when Dockerfile or dependencies change
    changes:
      - Dockerfile
      - package.json
      - bun.lockb

# For self-hosted GitLab with custom CA certificates
claude_self_hosted:
  image: realmikechong/claude-code-gitlab:latest

  before_script:
    # Add custom CA certificate if needed
    - |
      if [ -n "$GITLAB_CA_CERT" ]; then
        echo "$GITLAB_CA_CERT" >> /etc/ssl/certs/ca-certificates.crt
        git config --global http.sslCAInfo /etc/ssl/certs/ca-certificates.crt
      fi

  script:
    - claude-code-action

  variables:
    # Self-hosted GitLab configuration
    GITLAB_HOST: $CI_SERVER_URL
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN

    # Optional: Custom instructions for self-hosted context
    CLAUDE_INSTRUCTIONS: |
      You are working with a self-hosted GitLab instance.
      Follow company coding standards and security policies.

  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
