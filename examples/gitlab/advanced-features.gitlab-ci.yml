# Advanced GitLab CI/CD Configuration for Claude Code
# This example demonstrates advanced features and integrations

stages:
  - validate
  - assist
  - test
  - deploy

variables:
  # Claude configuration with advanced features
  CLAUDE_TRIGGER_PHRASE: "@claude"
  CLAUDE_MODEL: "claude-3-5-sonnet-latest"
  CLAUDE_BRANCH_PREFIX: "claude/"
  BASE_BRANCH: $CI_DEFAULT_BRANCH

  # Performance settings
  CLAUDE_MAX_THINKING_TIME: "300000" # 5 minutes max thinking
  CLAUDE_TEMPERATURE: "0.2" # Lower temperature for more consistent output

  # Caching
  BUN_CACHE_DIR: ".bun-cache"
  PIP_CACHE_DIR: ".pip-cache"

# Validate that Claude should run
.claude_rules:
  rules:
    # Run on MR comments containing trigger phrase
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_request_note"'
      when: always
    # Run on MR description updates containing trigger phrase
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_DESCRIPTION =~ /$CLAUDE_TRIGGER_PHRASE/'
      when: always
    # Manual trigger with custom prompt
    - if: '$CI_PIPELINE_SOURCE == "web" && $CLAUDE_DIRECT_PROMPT'
      when: always
    # Scheduled runs for maintenance tasks
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TYPE == "claude_maintenance"'
      when: always

# Pre-check before running Claude
validate_request:
  stage: validate
  image: alpine:latest
  extends: .claude_rules
  before_script:
    - apk add --no-cache jq curl
  script:
    # Get token for API calls
    - GITLAB_API_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN:-$GITLAB_TOKEN}"

    # Check if user has permission to trigger Claude
    - |
      USER_ROLE=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/members/all/$GITLAB_USER_ID" \
        | jq -r '.access_level')

      if [ "$USER_ROLE" -lt "30" ]; then
        echo "Error: User must be Developer or higher to use Claude"
        exit 1
      fi

    # Check rate limits
    - |
      LAST_RUN=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables/CLAUDE_LAST_RUN" \
        | jq -r '.value // "0"')

      CURRENT_TIME=$(date +%s)
      TIME_DIFF=$((CURRENT_TIME - LAST_RUN))

      if [ "$TIME_DIFF" -lt "300" ]; then
        echo "Error: Please wait at least 5 minutes between Claude requests"
        exit 1
      fi

    # Update last run time
    - |
      curl -s --request PUT \
        --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
        --form "value=$CURRENT_TIME" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables/CLAUDE_LAST_RUN"

# Main Claude job with advanced features
claude_advanced:
  stage: assist
  image: oven/bun:1.1.29-alpine
  extends: .claude_rules
  needs: ["validate_request"]
  variables:
    # Authentication - use OAuth token (recommended)
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN
    # Or traditional tokens:
    # GITLAB_TOKEN: $CLAUDE_GITLAB_TOKEN
    # ANTHROPIC_API_KEY: $CLAUDE_API_KEY

    # Additional permissions for CI results access
    ADDITIONAL_PERMISSIONS: |
      pipelines: read
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - $BUN_CACHE_DIR
      - node_modules/
      - .bun.lockb
  before_script:
    # Install system dependencies
    - apk add --no-cache git openssh-client python3 py3-pip

    # Clone Claude Code for GitLab
    - git clone https://github.com/RealMikeChong/claude-code-for-gitlab.git /tmp/claude-code
    - cd /tmp/claude-code
    - bun install --frozen-lockfile

    # Return to project directory
    - cd $CI_PROJECT_DIR

    # Install Python dependencies for code analysis
    - pip install --cache-dir=$PIP_CACHE_DIR pylint black isort

    # Configure git
    - git config --global user.name "Claude Bot"
    - git config --global user.email "claude@$CI_SERVER_HOST"

    # Set up SSH for pushing changes
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - ssh-keyscan -H $CI_SERVER_HOST >> ~/.ssh/known_hosts

  script:
    # Analyze code quality before Claude runs
    - |
      if [ -f "pyproject.toml" ] || [ -f "setup.py" ]; then
        echo "Running Python linting..."
        pylint src/ || true
      fi

    # Prepare context with additional information
    - |
      cat > claude_context.md << EOF
      ## Project Information
      - Language: $(git ls-files | grep -E '\.(py|js|ts|go|rs)$' | head -1 | xargs -I {} basename {} | cut -d. -f2)
      - Last commit: $CI_COMMIT_SHORT_SHA by $CI_COMMIT_AUTHOR
      - Branch age: $(git log --format=%cr -1)
      - Test coverage: $(cat coverage.txt 2>/dev/null || echo "Unknown")

      ## Recent CI Results
      $(curl -s --header "PRIVATE-TOKEN: ${CLAUDE_CODE_OAUTH_TOKEN:-$GITLAB_TOKEN}" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines?per_page=5" \
        | jq -r '.[] | "- \(.ref): \(.status)"')
      EOF

    # Run Claude with context
    - export CLAUDE_ADDITIONAL_CONTEXT=$(cat claude_context.md)
    - cd /tmp/claude-code && bun run src/entrypoints/prepare.ts

    # Post-process Claude's output
    - |
      if [ -d ".git" ]; then
        # Format code if changed
        if git diff --name-only | grep -q '\.py$'; then
          black $(git diff --name-only | grep '\.py$') || true
          isort $(git diff --name-only | grep '\.py$') || true
        fi
        
        # Commit formatting changes
        if [ -n "$(git status --porcelain)" ]; then
          git add .
          git commit -m "Auto-format code changes by Claude"
          git push origin HEAD
        fi
      fi

  artifacts:
    reports:
      dotenv: claude.env
    paths:
      - claude_output.log
      - claude_changes.diff
    expire_in: 1 week

  after_script:
    # Save Claude's output
    - git diff > claude_changes.diff
    - echo "CLAUDE_RUN_ID=$CI_PIPELINE_ID" > claude.env
    - |
      # Update MR with results
      GITLAB_API_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN:-$GITLAB_TOKEN}"
      curl -s --request POST \
        --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
        --form "body=Claude has completed the requested task. [View job]($CI_JOB_URL)" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes"

# Run tests after Claude's changes
test_claude_changes:
  stage: test
  image: oven/bun:1.1.29-alpine
  needs: ["claude_advanced"]
  extends: .claude_rules
  script:
    - bun install --frozen-lockfile
    - bun test
    - |
      # Report test results back to MR
      if [ "$CI_JOB_STATUS" == "success" ]; then
        EMOJI="✅"
        STATUS="passed"
      else
        EMOJI="❌"
        STATUS="failed"
      fi

      GITLAB_API_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN:-$GITLAB_TOKEN}"
      curl -s --request POST \
        --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
        --form "body=$EMOJI All tests $STATUS after Claude's changes" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes"

  coverage: '/Coverage: \d+\.\d+%/'

# Auto-merge Claude's changes if tests pass
auto_merge_claude:
  stage: deploy
  image: alpine:latest
  needs: ["test_claude_changes"]
  extends: .claude_rules
  rules:
    - if: '$AUTO_MERGE_CLAUDE == "true"'
      when: on_success
  script:
    - apk add --no-cache curl jq
    - |
      # Check if all pipelines passed
      GITLAB_API_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN:-$GITLAB_TOKEN}"
      PIPELINE_STATUS=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID" \
        | jq -r '.status')

      if [ "$PIPELINE_STATUS" == "success" ]; then
        # Approve MR (if required)
        curl -s --request POST \
          --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/approve"
        
        # Merge MR
        curl -s --request PUT \
          --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
          --form "merge_when_pipeline_succeeds=true" \
          --form "should_remove_source_branch=true" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/merge"
        
        echo "Claude's changes will be automatically merged!"
      fi

# Scheduled maintenance job
claude_maintenance:
  stage: assist
  image: oven/bun:1.1.29-alpine
  only:
    - schedules
  variables:
    CLAUDE_DIRECT_PROMPT: |
      Please review the codebase and:
      1. Update dependencies to their latest stable versions
      2. Fix any deprecation warnings
      3. Improve code documentation where needed
      4. Suggest performance optimizations
  script:
    - bun install --frozen-lockfile
    - cd /tmp/claude-code && bun run src/entrypoints/prepare.ts
    - |
      # Create issue with Claude's findings
      ISSUE_RESPONSE=$(curl -s --request POST \
        --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --form "title=Claude Maintenance Report - $(date +%Y-%m-%d)" \
        --form "description=Claude has completed the scheduled maintenance review. See the job for details: $CI_JOB_URL" \
        --form "labels=maintenance,claude" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/issues")

      echo "Created issue: $(echo $ISSUE_RESPONSE | jq -r '.web_url')"
