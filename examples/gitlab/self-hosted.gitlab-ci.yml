# GitLab CI/CD Configuration for Self-Hosted GitLab
# This example shows Claude Code configuration for self-hosted GitLab instances

variables:
  # Self-hosted GitLab configuration
  GITLAB_HOST: "https://gitlab.company.com" # Your GitLab instance URL

  # Claude configuration
  CLAUDE_TRIGGER_PHRASE: "@ai-assistant" # Custom trigger phrase
  CLAUDE_MODEL: "claude-3-5-sonnet-latest"

  # Git configuration for self-hosted
  GIT_STRATEGY: clone
  GIT_DEPTH: 0 # Full clone for better context

# Claude Code job for self-hosted GitLab
claude_assistant:
  image: oven/bun:1.1.29-alpine
  stage: build
  before_script:
    # Install dependencies
    - apk add --no-cache git openssh-client ca-certificates

    # Configure git for self-hosted instance
    - git config --global user.name "AI Assistant"
    - git config --global user.email "ai-assistant@company.com"

    # If using self-signed certificates
    - |
      if [ -n "$GITLAB_CERT" ]; then
        echo "$GITLAB_CERT" > /usr/local/share/ca-certificates/gitlab.crt
        update-ca-certificates
        git config --global http.sslCAInfo /usr/local/share/ca-certificates/gitlab.crt
      fi

    # Clone Claude Code for GitLab from GitHub
    - git clone https://github.com/RealMikeChong/claude-code-for-gitlab.git /tmp/claude-code
    - cd /tmp/claude-code
    - bun install --frozen-lockfile

    # Return to project directory
    - cd $CI_PROJECT_DIR

  script:
    # Debug information
    - echo "GitLab Host: $CI_SERVER_URL"
    - echo "Project: $CI_PROJECT_PATH"
    - echo "MR IID: $CI_MERGE_REQUEST_IID"

    # Run Claude Code from cloned repository
    - cd /tmp/claude-code && bun run src/entrypoints/prepare.ts

  rules:
    # Trigger on MR comments
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    # Trigger on issue comments (via webhook)
    - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGER_SOURCE == "issue_comment"'
      when: always

  variables:
    # Authentication - Claude Code OAuth Token (recommended)
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN

    # Or use traditional tokens:
    # GITLAB_TOKEN: $CLAUDE_GITLAB_TOKEN  # Personal access token with api scope
    # ANTHROPIC_API_KEY: $CLAUDE_API_KEY

    # Explicitly set the GitLab host for the action
    CI_SERVER_URL: $GITLAB_HOST

    # Optional: Proxy configuration for external API calls
    HTTP_PROXY: $CORPORATE_PROXY
    HTTPS_PROXY: $CORPORATE_PROXY
    NO_PROXY: "gitlab.company.com,localhost,127.0.0.1"

# Alternative: Using local LLM via Ollama
claude_local_llm:
  image: oven/bun:1.1.29-alpine
  stage: build
  services:
    # Run Ollama as a service
    - name: ollama/ollama:latest
      alias: ollama
      command: ["serve"]
  before_script:
    - apk add --no-cache git openssh-client curl

    # Clone Claude Code for GitLab
    - git clone https://github.com/RealMikeChong/claude-code-for-gitlab.git /tmp/claude-code
    - cd /tmp/claude-code
    - bun install --frozen-lockfile

    # Pull the model in Ollama
    - |
      curl -X POST http://ollama:11434/api/pull -d '{"name": "llama3:70b"}'

    # Return to project directory
    - cd $CI_PROJECT_DIR

  script:
    # Use Ollama-compatible endpoint
    - export ANTHROPIC_API_BASE="http://ollama:11434/v1"
    - export CLAUDE_MODEL="llama3:70b"
    - cd /tmp/claude-code && bun run src/prepare.ts

  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $USE_LOCAL_LLM == "true"'

  variables:
    # Use OAuth token for GitLab auth
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN
    # Use a dummy API key for Ollama
    ANTHROPIC_API_KEY: "ollama"

# Job for on-premise deployment with strict security
claude_secure:
  image: oven/bun:1.1.29-alpine
  stage: build
  before_script:
    - apk add --no-cache git openssh-client
    - bun install --frozen-lockfile --production

  script:
    # Run in restricted mode
    - bun run src/prepare.ts

  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

  variables:
    # Use OAuth token
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN

    # Security restrictions
    CLAUDE_ALLOWED_TOOLS: |
      read_file
      write_file
      search_files
      run_command: echo, ls, cat, grep

    CLAUDE_DISALLOWED_TOOLS: |
      run_command: rm, curl, wget, ssh
      browser_action
      mcp__*

    # Restrict file access
    CLAUDE_WORKSPACE_ROOT: $CI_PROJECT_DIR
    CLAUDE_RESTRICT_TO_WORKSPACE: "true"

    # Custom instructions for security
    CLAUDE_INSTRUCTIONS: |
      You are an AI assistant helping with code review and implementation.
      Security restrictions:
      - You cannot access external resources
      - You cannot delete files
      - You cannot run network commands
      - Stay within the project directory

# Notification job after Claude completes
notify_completion:
  image: alpine:latest
  stage: .post
  before_script:
    - apk add --no-cache curl
  script:
    - |
      # Send notification to Slack/Teams/etc
      if [ "$CI_JOB_STATUS" == "success" ]; then
        MESSAGE="Claude completed work on $CI_MERGE_REQUEST_TITLE"
      else
        MESSAGE="Claude encountered an error on $CI_MERGE_REQUEST_TITLE"
      fi

      # Example: Send to Mattermost (self-hosted Slack alternative)
      curl -i -X POST \
        -H "Content-Type: application/json" \
        -d "{\"text\": \"$MESSAGE\", \"channel\": \"ai-notifications\"}" \
        $MATTERMOST_WEBHOOK_URL

  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_failure
