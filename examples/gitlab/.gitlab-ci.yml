# GitLab CI/CD Configuration for Claude Code Action
# This example shows how to use Claude Code in GitLab CI/CD pipelines

variables:
  # Claude configuration
  CLAUDE_TRIGGER_PHRASE: "@claude"
  CLAUDE_MODEL: "sonnet"

  # Branch configuration
  CLAUDE_BRANCH_PREFIX: "claude/"
  BASE_BRANCH: "main"

  # Optional: Custom instructions for Claude
  CLAUDE_INSTRUCTIONS: |
    You are a helpful assistant that fixes bugs and implements features.
    Always write tests for your changes.
    Follow the project's coding standards.

# Template for Claude Code jobs
.claude_template:
  image: oven/bun:1.1.29-alpine
  before_script:
    # Install dependencies
    - apk add --no-cache git openssh-client curl
    # Clone the Claude Code for GitLab repository
    - git clone https://github.com/RealMikeChong/claude-code-for-gitlab.git /tmp/claude-code
    - cd /tmp/claude-code
    - bun install --frozen-lockfile
    # Copy current repository context
    - cd $CI_PROJECT_DIR
  script:
    # Run Claude Code action from the cloned repository
    - cd /tmp/claude-code && bun run src/entrypoints/prepare.ts
  only:
    # Only run on merge request events
    - merge_requests
  except:
    # Don't run on draft MRs unless explicitly triggered
    variables:
      - $CI_MERGE_REQUEST_TITLE =~ /^(WIP|Draft):/

# Job triggered by merge request comments
claude_mr_comment:
  extends: .claude_template
  rules:
    # Trigger when a comment contains the trigger phrase
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_request_note"'
      when: always
  variables:
    # GitLab automatically provides these variables
    # CI_PROJECT_ID: Project ID
    # CI_MERGE_REQUEST_IID: MR internal ID
    # CI_SERVER_URL: GitLab instance URL
    # GITLAB_USER_NAME: User who triggered the pipeline
    # GITLAB_USER_EMAIL: User's email

    # Authentication options (choose one):
    # Option 1: Claude Code OAuth Token (recommended)
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN # Set as CI/CD variable

    # Option 2: Traditional tokens
    # GITLAB_TOKEN: $CLAUDE_GITLAB_TOKEN  # GitLab PAT with api scope
    # ANTHROPIC_API_KEY: $CLAUDE_API_KEY  # Anthropic API key

# Job triggered by issue comments
claude_issue_comment:
  extends: .claude_template
  rules:
    # Trigger when an issue comment contains the trigger phrase
    - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGER_TYPE == "issue_comment"'
      when: always
  variables:
    # For issues, we need to create a new branch
    CLAUDE_BRANCH: "${CLAUDE_BRANCH_PREFIX}issue-${CI_ISSUE_IID}"

    # Use OAuth token (recommended) or traditional tokens
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN

# Alternative: Using AWS Bedrock
claude_bedrock:
  extends: .claude_template
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $USE_BEDROCK == "true"'
  variables:
    # OAuth token for GitLab authentication
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN
    CLAUDE_PROVIDER: "bedrock"
    AWS_REGION: "us-east-1"
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID # Set as CI/CD variable
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY # Set as CI/CD variable
    # Or use OIDC authentication:
    # AWS_ROLE_ARN: "arn:aws:iam::123456789012:role/GitLabClaude"

# Alternative: Using Google Vertex AI
claude_vertex:
  extends: .claude_template
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $USE_VERTEX == "true"'
  variables:
    # OAuth token for GitLab authentication
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN
    CLAUDE_PROVIDER: "vertex"
    GOOGLE_PROJECT_ID: "my-gcp-project"
    GOOGLE_REGION: "us-central1"
    # Use GitLab's Workload Identity Federation
    GOOGLE_SERVICE_ACCOUNT: "claude-gitlab@my-gcp-project.iam.gserviceaccount.com"
  id_tokens:
    GOOGLE_ID_TOKEN:
      aud: https://gitlab.com

# Advanced: Custom MCP server configuration
claude_with_mcp:
  extends: .claude_template
  variables:
    # OAuth token (or use traditional tokens below)
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN
    # ANTHROPIC_API_KEY: $CLAUDE_API_KEY  # If using traditional auth

    # Custom MCP configuration for additional tools
    CLAUDE_MCP_CONFIG: |
      {
        "mcpServers": {
          "database": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-postgres"],
            "env": {
              "DATABASE_URL": "$DATABASE_URL"
            }
          }
        }
      }

# Production deployment after Claude's changes
deploy_claude_changes:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deploying Claude's changes..."
    # Add your deployment commands here
  rules:
    # Deploy when Claude's MR is merged
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_AUTHOR =~ /Claude/"
      when: manual
  environment:
    name: production
    url: https://app.example.com
