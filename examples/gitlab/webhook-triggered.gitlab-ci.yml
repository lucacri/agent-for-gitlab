# GitLab CI/CD Configuration using Webhook Triggers for Issue Comments
# This approach is specifically for triggering Claude Code on issue comment events,
# which don't have native CI/CD triggers in GitLab.
#
# NOTE: For merge request events, use the standard `rules` syntax with
# `if: '$CI_PIPELINE_SOURCE == "merge_request_event"'` instead of webhooks.
# See basic-setup.gitlab-ci.yml for the recommended approach.

# Define the Claude Code job that will be triggered by webhooks
claude_webhook_handler:
  image: oven/bun:1.1.29-alpine
  stage: build
  before_script:
    # Install git for repository operations
    - apk add --no-cache git openssh-client

    # Clone Claude Code for GitLab
    - git clone https://github.com/RealMikeChong/claude-code-for-gitlab.git /tmp/claude-code
    - cd /tmp/claude-code
    - bun install --frozen-lockfile

    # Configure git
    - git config --global user.name "Claude Bot"
    - git config --global user.email "claude-bot@example.com"

    # Return to project directory
    - cd $CI_PROJECT_DIR
  script:
    # Parse webhook payload from environment
    - echo "Processing GitLab webhook event..."
    - echo "Event type: ${GITLAB_EVENT_TYPE}"

    # Run Claude Code action from cloned repository
    - cd /tmp/claude-code && bun run src/entrypoints/prepare.ts
  only:
    # Only run when triggered by webhook
    - triggers
  variables:
    # Authentication - Claude Code OAuth Token (recommended)
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN

    # Or use traditional tokens:
    # GITLAB_TOKEN: $CLAUDE_GITLAB_TOKEN
    # ANTHROPIC_API_KEY: $CLAUDE_API_KEY

    # Claude configuration
    CLAUDE_TRIGGER_PHRASE: "@claude"
    CLAUDE_MODEL: "claude-3-5-sonnet-latest"

    # The webhook payload is passed as GITLAB_WEBHOOK_PAYLOAD
    # This is automatically set when using GitLab webhooks

# Webhook configuration for different event types
# Add these webhooks in GitLab project settings:

# 1. Merge Request Events Webhook
# URL: https://gitlab.com/api/v4/projects/PROJECT_ID/trigger/pipeline
# Token: Create a pipeline trigger token in CI/CD settings
# Events: Merge request events, Comments
#
# Add these variables to the webhook:
# - variables[GITLAB_EVENT_TYPE]=merge_request
# - variables[TRIGGER_TOKEN]=your-trigger-token

# 2. Issue Events Webhook
# URL: https://gitlab.com/api/v4/projects/PROJECT_ID/trigger/pipeline
# Token: Same pipeline trigger token
# Events: Issues events, Comments on issues
#
# Add these variables to the webhook:
# - variables[GITLAB_EVENT_TYPE]=issue
# - variables[TRIGGER_TOKEN]=your-trigger-token

# Example job for testing webhook integration
test_webhook:
  image: alpine:latest
  stage: test
  script:
    - echo "Webhook payload:"
    - echo "$GITLAB_WEBHOOK_PAYLOAD" | base64 -d | head -n 20
    - echo "Event type: $GITLAB_EVENT_TYPE"
  only:
    - triggers
  when: manual

# Job to set up webhooks automatically (run once)
setup_webhooks:
  image: alpine:latest
  stage: .pre
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      # Create pipeline trigger if it doesn't exist
      TRIGGER_RESPONSE=$(curl -s --request POST \
        --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --form "description=Claude Code Webhook Trigger" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/triggers")

      TRIGGER_TOKEN=$(echo $TRIGGER_RESPONSE | jq -r '.token')
      echo "Pipeline trigger token: $TRIGGER_TOKEN"
      echo "Save this token in your webhook configuration!"

      # Create merge request webhook
      curl --request POST \
        --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --header "Content-Type: application/json" \
        --data '{
          "url": "'$CI_API_V4_URL'/projects/'$CI_PROJECT_ID'/trigger/pipeline",
          "merge_requests_events": true,
          "note_events": true,
          "enable_ssl_verification": true,
          "token": "'$TRIGGER_TOKEN'",
          "push_events": false,
          "issues_events": false,
          "job_events": false,
          "pipeline_events": false,
          "wiki_page_events": false
        }' \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/hooks"

      echo "Webhooks configured successfully!"
  when: manual
  only:
    - main
