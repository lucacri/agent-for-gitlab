# GitLab CI/CD Configuration for Claude Code Webhook Server Integration
# This configuration works with the webhook server from gitlab-app/
#
# The webhook server listens for GitLab Note Hook events and triggers
# pipelines when @claude is mentioned in issues or merge requests.
#
# IMPORTANT: This requires deploying the webhook server first.
# See gitlab-app/README.md for deployment instructions.
#
# Two main jobs are provided:
# 1. claude_webhook_handler - Simple job using claude-runner.js
# 2. claude_advanced_handler - Advanced job using prepare.ts for full integration

# Define the Claude Code job that will be triggered by webhooks
claude_webhook_handler:
  image: node:20-alpine
  stage: build
  before_script:
    # Install git for repository operations
    - apk add --no-cache git openssh-client curl

    # Clone Claude Code for GitLab
    - git clone https://github.com/RealMikeChong/claude-code-for-gitlab.git /tmp/claude-code

    # Configure git
    - git config --global user.name "Claude Bot"
    - git config --global user.email "claude-bot@${CI_SERVER_HOST}"

    # Return to project directory
    - cd $CI_PROJECT_DIR
  script:
    # Debug information
    - echo "Processing Claude webhook trigger..."
    - echo "Project: ${CLAUDE_PROJECT_PATH}"
    - echo "Resource Type: ${CLAUDE_RESOURCE_TYPE}"
    - echo "Resource ID: ${CLAUDE_RESOURCE_ID}"
    - echo "Branch: ${CLAUDE_BRANCH}"
    - echo "Author: ${CLAUDE_AUTHOR}"
    - echo "Note: ${CLAUDE_NOTE}"

    # Checkout the branch where Claude should work
    - git fetch origin ${CLAUDE_BRANCH}:${CLAUDE_BRANCH} || true
    - git checkout ${CLAUDE_BRANCH} || git checkout -b ${CLAUDE_BRANCH}

    # Run the Claude runner script
    - node /tmp/claude-code/gitlab-app/scripts/claude-runner.js
  rules:
    # Only run when triggered by webhook with CLAUDE_TRIGGER variable
    - if: '$CLAUDE_TRIGGER == "true"'
  variables:
    # GitLab authentication (required for posting comments)
    GITLAB_TOKEN: $CLAUDE_GITLAB_TOKEN

    # Claude authentication - Claude Code OAuth Token (recommended)
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN
    # Or use Anthropic API key:
    # ANTHROPIC_API_KEY: $CLAUDE_API_KEY

    # Claude configuration
    CLAUDE_MODEL: "sonnet"

    # Optional: Custom instructions for Claude
    CLAUDE_INSTRUCTIONS: |
      You are a helpful assistant that fixes bugs and implements features.
      Always write tests for your changes.
      Follow the project's coding standards.

# Webhook configuration for Claude Code GitLab webhook server
# This configuration works with the webhook server from gitlab-app/
#
# The webhook server automatically triggers pipelines when @claude is mentioned
# and sets the CLAUDE_TRIGGER=true variable along with other context variables:
# - CLAUDE_PROJECT_PATH: The project path (e.g., owner/repo)
# - CLAUDE_RESOURCE_TYPE: Either "issue" or "merge_request"
# - CLAUDE_RESOURCE_ID: The issue/MR IID
# - CLAUDE_BRANCH: The branch to work on
# - CLAUDE_AUTHOR: The user who mentioned @claude
# - CLAUDE_NOTE: The comment text
#
# To use this configuration:
# 1. Deploy the webhook server from gitlab-app/
# 2. Configure GitLab webhook to point to your webhook server URL
# 3. The webhook server will trigger this pipeline with proper variables

# Alternative job using prepare.ts for more advanced integration
claude_advanced_handler:
  image: node:20-alpine
  stage: build
  before_script:
    # Install dependencies
    - apk add --no-cache git openssh-client curl

    # Clone Claude Code for GitLab
    - git clone https://github.com/RealMikeChong/claude-code-for-gitlab.git /tmp/claude-code
    - cd /tmp/claude-code

    # Install dependencies
    - npm install -g bun
    - bun install

    # Configure git
    - git config --global user.name "Claude Bot"
    - git config --global user.email "claude-bot@${CI_SERVER_HOST}"

    # Return to project directory
    - cd $CI_PROJECT_DIR
  script:
    # Set up environment for prepare.ts
    - export TRIGGER_PHRASE="${TRIGGER_PHRASE:-@claude}"
    - export DIRECT_PROMPT="${CLAUDE_NOTE}"

    # Checkout the branch
    - git fetch origin ${CLAUDE_BRANCH}:${CLAUDE_BRANCH} || true
    - git checkout ${CLAUDE_BRANCH} || git checkout -b ${CLAUDE_BRANCH}

    # Run prepare.ts to check triggers and set up context
    - cd /tmp/claude-code
    - bun run src/entrypoints/prepare.ts

    # Read outputs from prepare.ts
    - export CONTAINS_TRIGGER=$(grep "contains_trigger=" /tmp/claude-code/output.log | cut -d= -f2 || echo "false")

    # If trigger found, run Claude
    - |
      if [ "$CONTAINS_TRIGGER" = "true" ]; then
        echo "Trigger found, running Claude..."
        cd $CI_PROJECT_DIR
        
        # Run Claude with the prepared prompt
        if [ -f "/tmp/claude-prompts/claude-prompt.txt" ]; then
          PROMPT=$(cat /tmp/claude-prompts/claude-prompt.txt)
          npx @anthropic/claude-code@latest \
            --model "${CLAUDE_MODEL:-sonnet}" \
            --prompt "$PROMPT"
        fi
      else
        echo "No trigger found, skipping Claude execution"
      fi
  rules:
    - if: '$CLAUDE_TRIGGER == "true"'
  variables:
    # GitLab authentication
    GITLAB_TOKEN: $CLAUDE_GITLAB_TOKEN
    CLAUDE_CODE_GL_ACCESS_TOKEN: $CLAUDE_GITLAB_TOKEN

    # Claude authentication
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN

    # Skip permission checks if needed
    CC_SKIP_PRE_CHECK: "1"

    # Claude configuration
    CLAUDE_MODEL: "sonnet"

# Example job for testing webhook integration
test_webhook:
  image: alpine:latest
  stage: test
  script:
    - echo "Webhook payload:"
    - echo "$GITLAB_WEBHOOK_PAYLOAD" | base64 -d | head -n 20
    - echo "Event type: $GITLAB_EVENT_TYPE"
  rules:
    - if: '$CLAUDE_TRIGGER == "true"'
      when: manual

# Job to verify webhook server configuration
verify_webhook_config:
  image: alpine:latest
  stage: .pre
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Verifying Claude webhook server configuration..."
    - echo "Required variables for webhook server:"
    - echo "- GITLAB_TOKEN or CLAUDE_GITLAB_TOKEN: GitLab Personal Access Token"
    - echo "- ANTHROPIC_API_KEY or CLAUDE_CODE_OAUTH_TOKEN: Claude API credentials"
    - echo ""
    - echo "Webhook server should be configured to:"
    - echo "1. Listen for GitLab webhooks on Note Hook events"
    - echo "2. Trigger pipelines when @claude is mentioned"
    - echo "3. Pass CLAUDE_TRIGGER=true and context variables"
    - echo ""
    - echo "Current CI variables:"
    - echo "- CI_PROJECT_ID: $CI_PROJECT_ID"
    - echo "- CI_PROJECT_PATH: $CI_PROJECT_PATH"
    - echo "- CI_API_V4_URL: $CI_API_V4_URL"
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: manual

# Job to demonstrate direct Claude invocation without webhook
claude_direct:
  image: node:20-alpine
  stage: build
  before_script:
    - apk add --no-cache git openssh-client
    - git config --global user.name "Claude Bot"
    - git config --global user.email "claude-bot@${CI_SERVER_HOST}"
  script:
    # Direct Claude invocation for manual triggers
    - echo "Running Claude directly..."
    - |
      npx @anthropic/claude-code@latest \
        --model "${CLAUDE_MODEL:-sonnet}" \
        --prompt "${CLAUDE_PROMPT:-Please help with this GitLab project}"
  rules:
    # Manual trigger with CLAUDE_PROMPT variable
    - if: "$CLAUDE_PROMPT"
      when: manual
  variables:
    # Claude authentication
    CLAUDE_CODE_OAUTH_TOKEN: $CLAUDE_CODE_OAUTH_TOKEN
    # Or: ANTHROPIC_API_KEY: $CLAUDE_API_KEY

    # Claude configuration
    CLAUDE_MODEL: "sonnet"
