services:
  claude-webhook:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    image: realmikechong/claude-code-gitlab-webhook:${VERSION:-latest}
    container_name: claude-webhook-service
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      # Application Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - TZ=${TZ:-UTC}

      # GitLab Configuration
      - GITLAB_URL=${GITLAB_URL:-https://gitlab.com}
      - GITLAB_TOKEN=${GITLAB_TOKEN}
      - GITLAB_TRIGGER_TOKEN=${GITLAB_TRIGGER_TOKEN}
      - GITLAB_WEBHOOK_SECRET=${GITLAB_WEBHOOK_SECRET}
      - GITLAB_PROJECT_ID=${GITLAB_PROJECT_ID}
      - GITLAB_REF=${GITLAB_REF:-main}

      # Claude Configuration
      - CLAUDE_CODE_OAUTH_TOKEN=${CLAUDE_CODE_OAUTH_TOKEN}
      - CLAUDE_TRIGGER_PHRASE=${CLAUDE_TRIGGER_PHRASE:-@claude}
      - CLAUDE_MAX_RETRIES=${CLAUDE_MAX_RETRIES:-3}
      - CLAUDE_TIMEOUT=${CLAUDE_TIMEOUT:-300000}

      # Redis Configuration (if enabled)
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-false}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}

      # Security Configuration
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-}
      - TRUST_PROXY=${TRUST_PROXY:-false}
      - SECURE_HEADERS=${SECURE_HEADERS:-true}

    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro # Optional: for Docker operations
    networks:
      - claude-network
    depends_on:
      redis:
        condition: service_healthy
        required: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for rate limiting, caching, and session storage
  redis:
    image: redis:7-alpine
    container_name: claude-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - claude-network
    profiles:
      - redis
      - full
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: claude-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
      - ./nginx/cache:/var/cache/nginx
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro # Optional: Basic auth
    depends_on:
      - claude-webhook
    networks:
      - claude-network
    profiles:
      - nginx
      - full
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Prometheus metrics exporter (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - claude-network
    profiles:
      - monitoring
      - full

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: claude-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - claude-network
    profiles:
      - monitoring
      - full

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  claude-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
