# GitLab CI/CD Pipeline for Claude Code Webhook Service
# This pipeline builds and deploys the webhook service to GitLab App Runner

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  # Container Registry
  REGISTRY: $CI_REGISTRY
  IMAGE_NAME: $CI_REGISTRY_IMAGE/webhook-service
  # App Runner Configuration
  APP_RUNNER_SERVICE_NAME: claude-code-webhook
  AWS_DEFAULT_REGION: us-east-1

stages:
  - build
  - test
  - deploy

# Build Docker image
build:
  stage: build
  image: docker:24-cli
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - |
      echo "Building Docker image..."
      docker build \
        --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        --build-arg VERSION=$CI_COMMIT_REF_NAME \
        -t $IMAGE_NAME:$CI_COMMIT_SHA \
        -t $IMAGE_NAME:$CI_COMMIT_REF_NAME \
        -t $IMAGE_NAME:latest \
        ./webhook-service
    - |
      echo "Pushing Docker image..."
      docker push $IMAGE_NAME:$CI_COMMIT_SHA
      docker push $IMAGE_NAME:$CI_COMMIT_REF_NAME
      if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
        docker push $IMAGE_NAME:latest
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Security scan
security_scan:
  stage: test
  image: aquasec/trivy:latest
  services:
    - docker:24-dind
  variables:
    TRIVY_USERNAME: $CI_REGISTRY_USER
    TRIVY_PASSWORD: $CI_REGISTRY_PASSWORD
    TRIVY_AUTH_URL: $CI_REGISTRY
  script:
    - |
      trivy image \
        --exit-code 0 \
        --severity UNKNOWN,LOW,MEDIUM \
        --format table \
        $IMAGE_NAME:$CI_COMMIT_SHA
    - |
      trivy image \
        --exit-code 1 \
        --severity HIGH,CRITICAL \
        --format json \
        --output trivy-report.json \
        $IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    reports:
      container_scanning: trivy-report.json
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Deploy to development (App Runner)
deploy_dev:
  stage: deploy
  image: amazon/aws-cli:latest
  environment:
    name: development
    url: https://dev-claude-webhook.apprunner.com
  before_script:
    - yum install -y jq
  script:
    - |
      echo "Deploying to AWS App Runner (Development)..."

      # Create App Runner configuration
      cat > apprunner.yaml << EOF
      version: 1.0
      runtime: docker
      build:
        commands:
          build:
            - echo "No build commands"
      run:
        runtime-version: latest
        command: node src/server.js
        network:
          port: 3000
          env: PORT
        env:
          - name: NODE_ENV
            value: production
          - name: GITLAB_URL
            value: ${GITLAB_URL}
          - name: GITLAB_TOKEN
            value: ${GITLAB_TOKEN}
          - name: GITLAB_TRIGGER_TOKEN
            value: ${GITLAB_TRIGGER_TOKEN}
          - name: GITLAB_WEBHOOK_SECRET
            value: ${GITLAB_WEBHOOK_SECRET}
          - name: CLAUDE_CODE_OAUTH_TOKEN
            value: ${CLAUDE_CODE_OAUTH_TOKEN}
      EOF

      # Update or create App Runner service
      if aws apprunner describe-service --service-arn "arn:aws:apprunner:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:service/${APP_RUNNER_SERVICE_NAME}" 2>/dev/null; then
        echo "Updating existing App Runner service..."
        aws apprunner update-service \
          --service-arn "arn:aws:apprunner:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:service/${APP_RUNNER_SERVICE_NAME}" \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "'${IMAGE_NAME}:${CI_COMMIT_SHA}'",
              "ImageConfiguration": {
                "Port": "3000"
              },
              "ImageRepositoryType": "ECR_PUBLIC"
            },
            "AutoDeploymentsEnabled": false
          }'
      else
        echo "Creating new App Runner service..."
        aws apprunner create-service \
          --service-name "${APP_RUNNER_SERVICE_NAME}" \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "'${IMAGE_NAME}:${CI_COMMIT_SHA}'",
              "ImageConfiguration": {
                "Port": "3000"
              },
              "ImageRepositoryType": "ECR_PUBLIC"
            },
            "AutoDeploymentsEnabled": false
          }'
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  needs:
    - build
    - security_scan

# Deploy to production (App Runner)
deploy_prod:
  stage: deploy
  image: amazon/aws-cli:latest
  environment:
    name: production
    url: https://claude-webhook.apprunner.com
  before_script:
    - yum install -y jq
  script:
    - |
      echo "Deploying to AWS App Runner (Production)..."

      # Similar deployment script as dev but with production configuration
      aws apprunner update-service \
        --service-arn "arn:aws:apprunner:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:service/${APP_RUNNER_SERVICE_NAME}-prod" \
        --source-configuration '{
          "ImageRepository": {
            "ImageIdentifier": "'${IMAGE_NAME}:${CI_COMMIT_SHA}'",
            "ImageConfiguration": {
              "Port": "3000"
            },
            "ImageRepositoryType": "ECR_PUBLIC"
          },
          "AutoDeploymentsEnabled": false
        }'
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  needs:
    - build
    - security_scan

# Alternative: Deploy to GitLab-managed Kubernetes
deploy_k8s:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: kubernetes
    kubernetes:
      namespace: claude-code
  script:
    - |
      kubectl create deployment claude-webhook \
        --image=$IMAGE_NAME:$CI_COMMIT_SHA \
        --dry-run=client -o yaml | kubectl apply -f -
    - |
      kubectl set image deployment/claude-webhook \
        claude-webhook=$IMAGE_NAME:$CI_COMMIT_SHA
    - kubectl rollout status deployment/claude-webhook
  rules:
    - if: $CI_KUBERNETES_ACTIVE
      when: manual
  needs:
    - build
    - security_scan
