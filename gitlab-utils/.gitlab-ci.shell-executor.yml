# GitLab CI/CD Configuration for AI Code Webhook Server
# SHELL EXECUTOR VERSION with Docker Run
#
# This version uses the shell executor and runs the agent via `docker run`
# Ideal for:
# - Self-hosted GitLab runners with custom SSL certificates
# - Private GitLab instances that need SSL cert mounting
# - Advanced Docker configuration needs
# - Full control over container execution

stages:
  - ai

variables:
  # Specify the prebuilt agent image containing the runner and Claude Code CLI
  # Available at: https://hub.docker.com/r/lucacri/agent-for-gitlab
  AI_AGENT_IMAGE: "lucacri/agent-for-gitlab:latest"

  # AI_MODEL: Claude model to use (optional, defaults to "sonnet")
  # Options: "sonnet", "opus", "haiku", or full model ID like "claude-sonnet-4-20250514"
  # AI_MODEL: "sonnet"

  # AI_INSTRUCTIONS: Custom system prompt to append to Claude's instructions (optional)
  # AI_INSTRUCTIONS: "You are a helpful coding assistant"

# ============================================================================
# REQUIRED CI/CD VARIABLES (Settings → CI/CD → Variables):
# ============================================================================
#
# 1. CLAUDE_CODE_OAUTH_TOKEN (required)
#    - Value: sk-ant-oat01-xxxxx (your Claude OAuth token)
#    - Type: Variable
#    - Flags: ✅ Masked
#    - Get it from: https://claude.ai/settings/tokens
#
# 2. GITLAB_TOKEN (required)
#    - Value: glpat-xxxxx (GitLab Personal Access Token)
#    - Type: Variable
#    - Flags: ✅ Masked
#    - Scopes: api, read_repository, write_repository
#    - Get it from: Settings → Access Tokens
#
# ============================================================================

# ============================================================================
# RUNNER HOST SETUP (One-time):
# ============================================================================
#
# Ensure gitlab-runner user can run Docker:
#   sudo usermod -aG docker gitlab-runner
#   sudo gitlab-runner restart
#
# That's it! No credential files or profile directories needed.
#
# ============================================================================

ai_webhook_handler:
  stage: ai
  tags:
    - shell  # MUST use shell executor (not docker executor)

  script:
    # Run the agent container with docker run
    - |
      docker run --rm \
        -v /etc/ssl/certs:/etc/ssl/certs:ro \
        -v $(pwd):/opt/agent/repo \
        -e CLAUDE_CODE_OAUTH_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN}" \
        -e GITLAB_TOKEN="${GITLAB_TOKEN}" \
        -e CI_SERVER_HOST="${CI_SERVER_HOST}" \
        -e CI_SERVER_URL="${CI_SERVER_URL}" \
        -e CI_PROJECT_ID="${CI_PROJECT_ID}" \
        -e AI_TRIGGER="${AI_TRIGGER}" \
        -e AI_PROJECT_PATH="${AI_PROJECT_PATH}" \
        -e AI_AUTHOR="${AI_AUTHOR}" \
        -e AI_RESOURCE_TYPE="${AI_RESOURCE_TYPE}" \
        -e AI_RESOURCE_ID="${AI_RESOURCE_ID}" \
        -e AI_DISCUSSION_ID="${AI_DISCUSSION_ID}" \
        -e AI_BRANCH="${AI_BRANCH}" \
        -e AI_GITLAB_EMAIL="${AI_GITLAB_EMAIL}" \
        -e AI_GITLAB_USERNAME="${AI_GITLAB_USERNAME}" \
        -e AI_MODEL="${AI_MODEL}" \
        -e DIRECT_PROMPT="${DIRECT_PROMPT}" \
        -e CUSTOM_AGENT_PROMPT="${CUSTOM_AGENT_PROMPT}" \
        -e AI_INSTRUCTIONS="${AI_INSTRUCTIONS}" \
        ${AI_AGENT_IMAGE} \
        ai-runner

  rules:
    # Only run when triggered by @ai comment webhook
    - if: '$AI_TRIGGER == "true"'

  artifacts:
    paths:
      - ai-output.json
    expire_in: 1 week

  allow_failure: true  # Don't block other pipelines if AI fails

# ============================================================================
# VOLUME MOUNTS EXPLAINED:
# ============================================================================
#
# -v /etc/ssl/certs:/etc/ssl/certs:ro
#   → Mounts system SSL certificates
#   → Required for private GitLab instances with custom SSL certs
#   → Read-only mount for security
#
# -v $(pwd):/opt/agent/repo
#   → Mounts the Git repository into the container
#   → $(pwd) is the GitLab checkout directory (/home/gitlab-runner/builds/...)
#   → Agent can read code, make changes, and commit
#
# ============================================================================

# ============================================================================
# WHY USE SHELL EXECUTOR INSTEAD OF DOCKER EXECUTOR?
# ============================================================================
#
# The shell executor with `docker run` gives you:
#
# 1. SSL Certificate Control
#    - Mount /etc/ssl/certs for private GitLab instances
#    - Docker executor may not have access to custom SSL certs
#
# 2. Full Docker Control
#    - Complete control over docker run parameters
#    - Can add custom volume mounts as needed
#    - Easier debugging (can run same command manually)
#
# 3. Environment Flexibility
#    - Can run on any machine with Docker
#    - Not limited to GitLab's Docker executor capabilities
#
# Otherwise, prefer the simpler Docker executor version (.gitlab-ci.yml)
#
# ============================================================================

# ============================================================================
# TROUBLESHOOTING:
# ============================================================================
#
# Error: "Problem with the SSL CA cert"
#   Cause: Private GitLab instance with custom SSL certificate
#   Solution: Already fixed - /etc/ssl/certs is mounted in script above
#
# Error: "docker: command not found"
#   Cause: gitlab-runner user can't access Docker
#   Solution:
#     sudo usermod -aG docker gitlab-runner
#     sudo gitlab-runner restart
#
# Error: "Authentication failed" (401) from GitLab
#   Cause: GITLAB_TOKEN not set or invalid
#   Solution:
#     1. Check Settings → CI/CD → Variables → GITLAB_TOKEN exists
#     2. Verify token has scopes: api, read_repository, write_repository
#     3. Ensure token isn't expired
#
# Error: "Claude authentication failed"
#   Cause: CLAUDE_CODE_OAUTH_TOKEN not set or invalid
#   Solution:
#     1. Check Settings → CI/CD → Variables → CLAUDE_CODE_OAUTH_TOKEN exists
#     2. Get new token from https://claude.ai/settings/tokens
#     3. Ensure variable is marked as "Masked"
#
# Error: "dubious ownership in repository"
#   Cause: Git ownership check (old image version)
#   Solution: Use latest image (already fixed in v2025-10-24+)
#
# Test the setup manually:
#   ssh to your GitLab runner host and run:
#     cd /path/to/some/git/repo
#     docker run --rm \
#       -v /etc/ssl/certs:/etc/ssl/certs:ro \
#       -v $(pwd):/opt/agent/repo \
#       -e CLAUDE_CODE_OAUTH_TOKEN="sk-ant-oat01-xxxxx" \
#       -e GITLAB_TOKEN="glpat-xxxxx" \
#       lucacri/agent-for-gitlab:latest \
#       sh -c "which claude && claude --version"
#
# ============================================================================
