<div class="d-flex justify-between align-center mb-4">
    <div>
        <h1><%= project.name %></h1>
        <div class="text-muted"><%= project.path %></div>
    </div>
    <a href="/dashboard" class="btn btn-secondary">‚Üê Back to Dashboard</a>
</div>

<div class="card">
    <h2 class="mb-3">Claude Settings</h2>
    
    <form id="settings-form">
        <div class="form-group">
            <label for="triggerPhrase">Trigger Phrase</label>
            <input 
                type="text" 
                id="triggerPhrase" 
                name="triggerPhrase" 
                class="form-control" 
                value="<%= project.settings.triggerPhrase %>"
                placeholder="@claude"
            >
            <div class="text-muted mt-1">
                The phrase users need to mention in comments to trigger Claude. Default is "@claude".
            </div>
        </div>
        
        <div class="form-group">
            <label for="model">Claude Model</label>
            <select id="model" name="model" class="form-control">
                <option value="claude-3-sonnet-20241022" <%= project.settings.model === 'claude-3-sonnet-20241022' ? 'selected' : '' %>>
                    Claude 3 Sonnet (Default)
                </option>
                <option value="claude-3-haiku-20241022" <%= project.settings.model === 'claude-3-haiku-20241022' ? 'selected' : '' %>>
                    Claude 3 Haiku (Faster)
                </option>
                <option value="claude-3-opus-20241022" <%= project.settings.model === 'claude-3-opus-20241022' ? 'selected' : '' %>>
                    Claude 3 Opus (Most Capable)
                </option>
            </select>
            <div class="text-muted mt-1">
                Choose the Claude model to use for this project. Haiku is faster, Opus is more capable.
            </div>
        </div>
        
        <div class="form-group">
            <label for="maxTurns">Max Conversation Turns</label>
            <input 
                type="number" 
                id="maxTurns" 
                name="maxTurns" 
                class="form-control" 
                value="<%= project.settings.maxTurns %>"
                min="1"
                max="20"
            >
            <div class="text-muted mt-1">
                Maximum number of back-and-forth exchanges Claude can have in a single issue/MR thread.
            </div>
        </div>
        
        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-success">Save Settings</button>
            <button type="button" class="btn btn-danger" onclick="disableProject()">
                Disable Claude for This Project
            </button>
        </div>
    </form>
</div>

<div class="card">
    <h2 class="mb-3">Webhook Information</h2>
    <div class="form-group">
        <label>Webhook URL</label>
        <input 
            type="text" 
            class="form-control" 
            value="<%= process.env.APP_URL || 'https://your-domain.com' %>/webhook/<%= project.gitlabProjectId %>"
            readonly
        >
        <div class="text-muted mt-1">
            This webhook is automatically configured when you enable Claude for a project.
        </div>
    </div>
    
    <div class="form-group">
        <label>Enabled Events</label>
        <div style="display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 0.5rem;">
            <span class="badge">Issues</span>
            <span class="badge">Merge Requests</span>
            <span class="badge">Comments</span>
        </div>
        <div class="text-muted mt-1">
            Claude responds to comments containing the trigger phrase on issues and merge requests.
        </div>
    </div>
</div>

<div class="card">
    <h2 class="mb-3">Usage Tips</h2>
    <div style="background: #f8f9fa; padding: 1rem; border-radius: 4px; border-left: 4px solid #1f75cb;">
        <h4 class="mb-2">How to use Claude in this project:</h4>
        <ol style="margin-left: 1.5rem;">
            <li class="mb-1">Go to any issue or merge request in your GitLab project</li>
            <li class="mb-1">Add a comment mentioning "<code><%= project.settings.triggerPhrase %></code>" followed by your question or request</li>
            <li class="mb-1">Claude will respond with helpful insights, code reviews, or suggestions</li>
        </ol>
        
        <h4 class="mb-2 mt-3">Example commands:</h4>
        <ul style="margin-left: 1.5rem;">
            <li class="mb-1"><code><%= project.settings.triggerPhrase %> review this code</code></li>
            <li class="mb-1"><code><%= project.settings.triggerPhrase %> suggest improvements</code></li>
            <li class="mb-1"><code><%= project.settings.triggerPhrase %> explain this issue</code></li>
            <li class="mb-1"><code><%= project.settings.triggerPhrase %> help with testing</code></li>
        </ul>
    </div>
</div>

<style>
.badge {
    background: #e9ecef;
    color: #495057;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
}
</style>

<script>
document.getElementById('settings-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const settings = {
        triggerPhrase: formData.get('triggerPhrase'),
        model: formData.get('model'),
        maxTurns: parseInt(formData.get('maxTurns')),
    };
    
    try {
        const response = await fetch(`/api/projects/<%= project.gitlabProjectId %>/settings`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(settings),
        });
        
        if (response.ok) {
            alert('Settings saved successfully!');
        } else {
            const error = await response.json();
            alert(`Failed to save settings: ${error.error}`);
        }
    } catch (error) {
        console.error('Failed to save settings:', error);
        alert('Failed to save settings. Please try again.');
    }
});

async function disableProject() {
    if (!confirm('Are you sure you want to disable Claude for this project? This will remove the webhook and delete all project settings.')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/projects/<%= project.gitlabProjectId %>/disable`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        if (response.ok) {
            alert('Project disabled successfully!');
            window.location.href = '/dashboard';
        } else {
            const error = await response.json();
            alert(`Failed to disable project: ${error.error}`);
        }
    } catch (error) {
        console.error('Failed to disable project:', error);
        alert('Failed to disable project. Please try again.');
    }
}
</script>