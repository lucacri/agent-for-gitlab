services:
  # Main Claude GitLab OAuth Application
  claude-gitlab-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    image: ghcr.io/realmikechong/claude-code-for-gitlab:${VERSION:-latest}
    container_name: claude-gitlab-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      # Application Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - TZ=${TZ:-UTC}

      # App URLs (will be auto-detected via Cloudflare Tunnel if enabled)
      - APP_URL=${APP_URL:-http://localhost:3000}
      - GITLAB_URL=${GITLAB_URL:-https://gitlab.com}

      # GitLab OAuth Configuration
      - GITLAB_APP_ID=${GITLAB_APP_ID}
      - GITLAB_APP_SECRET=${GITLAB_APP_SECRET}
      - GITLAB_REDIRECT_URI=${GITLAB_REDIRECT_URI:-${APP_URL}/auth/callback}
      - GITLAB_SCOPE=${GITLAB_SCOPE:-api read_user read_repository}

      # Claude Configuration (choose one)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CLAUDE_CODE_OAUTH_TOKEN=${CLAUDE_CODE_OAUTH_TOKEN}
      - CLAUDE_MODEL=${CLAUDE_MODEL:-claude-3-sonnet-20241022}

      # Session Security
      - SESSION_SECRET=${SESSION_SECRET:-$(openssl rand -base64 32)}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-$(openssl rand -base64 32)}

      # Security Configuration
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-}
      - TRUST_PROXY=${TRUST_PROXY:-false}
      - SECURE_HEADERS=${SECURE_HEADERS:-true}

      # Cloudflare Tunnel Configuration (optional)
      - CLOUDFLARE_TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN:-}
      - CLOUDFLARE_TUNNEL_NAME=${CLOUDFLARE_TUNNEL_NAME:-claude-gitlab-app}

    volumes:
      - ./data:/app/data         # JSON storage for user data and projects
      - ./logs:/app/logs         # Application logs
      - ./config:/app/config:ro  # Optional configuration overrides
    networks:
      - claude-network
    depends_on:
      redis:
        condition: service_healthy
        required: false
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => { process.exit(1); });"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Cloudflare Tunnel (optional - enable with CLOUDFLARE_TUNNEL_TOKEN)
  cloudflare-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: claude-cloudflare-tunnel
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - claude-network
    depends_on:
      - claude-gitlab-app
    profiles:
      - tunnel
      - cloudflare
    healthcheck:
      test: ["CMD", "cloudflared", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Redis for session storage and rate limiting (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: claude-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - claude-network
    profiles:
      - redis
      - full
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Nginx reverse proxy with SSL termination (alternative to Cloudflare Tunnel)
  nginx:
    image: nginx:alpine
    container_name: claude-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
      - ./nginx/cache:/var/cache/nginx
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro
    depends_on:
      - claude-gitlab-app
    networks:
      - claude-network
    profiles:
      - nginx
      - full
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Prometheus metrics (optional monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - claude-network
    profiles:
      - monitoring
      - full

  # Grafana for visualization (optional monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: claude-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - claude-network
    profiles:
      - monitoring
      - full

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  claude-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16