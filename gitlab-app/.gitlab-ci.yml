# GitLab CI/CD Configuration for Claude Code Webhook Server
# This pipeline is triggered by the webhook server when @claude is mentioned

stages:
  - claude

variables:
  # Claude configuration
  CLAUDE_TRIGGER_PHRASE: "@claude"
  CLAUDE_MODEL: "sonnet"

  # Branch configuration
  CLAUDE_BRANCH_PREFIX: "claude/"

  # Optional: Custom instructions for Claude
  CLAUDE_INSTRUCTIONS: |
    You are a helpful assistant that fixes bugs and implements features.
    Always write tests for your changes.
    Follow the project's coding standards.

# Main Claude Code job triggered by webhook
claude_webhook_handler:
  stage: claude
  image: node:20-alpine
  before_script:
    # Install system dependencies
    - apk add --no-cache git openssh-client curl jq

    # Clone this repository to get the runner script
    - git clone https://github.com/RealMikeChong/claude-code-for-gitlab.git /tmp/claude-gitlab

    # Configure git for the working repository
    - git config --global user.name "Claude Bot"
    - git config --global user.email "claude-bot@${CI_SERVER_HOST}"

    # Set up SSH for pushing (if needed)
    - |
      if [ -n "$CLAUDE_DEPLOY_KEY" ]; then
        mkdir -p ~/.ssh
        echo "$CLAUDE_DEPLOY_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -t rsa ${CI_SERVER_HOST} >> ~/.ssh/known_hosts
      fi
  script:
    # Debug information
    - echo "Processing Claude webhook trigger..."
    - echo "Project: ${CLAUDE_PROJECT_PATH}"
    - echo "Resource Type: ${CLAUDE_RESOURCE_TYPE}"
    - echo "Resource ID: ${CLAUDE_RESOURCE_ID}"
    - echo "Branch: ${CLAUDE_BRANCH}"
    - echo "Author: ${CLAUDE_AUTHOR}"

    # Checkout the branch where Claude should work
    - git fetch origin ${CLAUDE_BRANCH}:${CLAUDE_BRANCH} || true
    - git checkout ${CLAUDE_BRANCH} || git checkout -b ${CLAUDE_BRANCH}

    # Run the Claude runner script
    - node /tmp/claude-gitlab/gitlab-app/scripts/claude-runner.js
  rules:
    # Only run when triggered by the webhook server
    - if: '$CLAUDE_TRIGGER == "true"'
  artifacts:
    reports:
      dotenv: claude.env
    paths:
      - claude-output.json
    expire_in: 1 week

# Optional: Post Claude's response back to GitLab
.post_response:
  stage: claude
  image: alpine:latest
  needs: ["claude_webhook_handler"]
  before_script:
    - apk add --no-cache curl jq
  script:
    # Read Claude's output
    - CLAUDE_RESPONSE=$(cat claude-output.json | jq -r '.response // "No response generated"')

    # Post response based on resource type
    - |
      if [ "$CLAUDE_RESOURCE_TYPE" = "merge_request" ]; then
        # Post to merge request
        curl --request POST \
          --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --header "Content-Type: application/json" \
          --data "{\"body\": \"$CLAUDE_RESPONSE\"}" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CLAUDE_RESOURCE_ID/notes"
      elif [ "$CLAUDE_RESOURCE_TYPE" = "issue" ]; then
        # Post to issue
        curl --request POST \
          --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --header "Content-Type: application/json" \
          --data "{\"body\": \"$CLAUDE_RESPONSE\"}" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/issues/$CLAUDE_RESOURCE_ID/notes"
      fi
  rules:
    - if: '$CLAUDE_TRIGGER == "true" && $CLAUDE_AUTO_RESPOND == "true"'
